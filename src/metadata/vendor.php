<?php
return array (
    'package' => 'Trello',
    'tagline' => 'Get data and update tasks on this project management app.',
    'description' => 'Connect to the Trello Project Management API to get data and update tasks on this project management app. Test an API call and export the code into your app.',
    'image' => 'https://logo.clearbit.com/trello.com?s=128',
    'repo' => 'https://github.com/RapidSoftwareSolutions/Marketplace-Trello-Package',
    'keywords' => array (
        'API', 'business', 'data', 'enterprise', 'listing', 'management', 'project', 'task',
    ),
    'accounts' => array (
        'domain' => 'trello.com',
        'credentials' => array (
            'apiKeys',
        ),
    ),
    'blocks' => array (
        array (
            'name' => 'getToken',
            'description' => 'Find a token by identifier.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields for fetching. One of: all, dateCreated, dateExpires, idMember, identifier, permissions.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'deleteToken',
            'description' => 'Remove a token.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getTokenMember',
            'description' => 'Get a given token member.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields for fetching. One of: all, avatarHash, avatarSource, bio, bioData, confirmed, email, fullName, gravatarHash, idBoards, idBoardsPinned, idOrganizations, idPremOrgsAdmin, initials, loginTypes, memberType, oneTimeMessagesDismissed, prefs, premiumFeatures, products, status, status, trophies, uploadedAvatarHash, url, username.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getTokenWebhooks',
            'description' => 'Get a given token webhooks.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getTokenSingleWebhook',
            'description' => 'Get a given token single webhook by identifier.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idWebhook',
                    'type' => 'String',
                    'info' => 'The identifier of the webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createTokenWebhook',
            'description' => 'Create a given token webhook.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'callbackURL',
                    'type' => 'String',
                    'info' => 'A valid URL that is reachable with a HEAD request.',
                    'required' => true,
                ),
                array (
                    'name' => 'idModel',
                    'type' => 'String',
                    'info' => 'Identifier of the model to be monitored.',
                    'required' => true,
                ),
                array (
                    'name' => 'description',
                    'type' => 'String',
                    'info' => 'Description of webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateTokenWebhook',
            'description' => 'Update a given token webhook.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'callbackURL',
                    'type' => 'String',
                    'info' => 'A valid URL that is reachable with a HEAD request.',
                    'required' => true,
                ),
                array (
                    'name' => 'idModel',
                    'type' => 'String',
                    'info' => 'Identifier of the model to be monitored.',
                    'required' => true,
                ),
                array (
                    'name' => 'description',
                    'type' => 'String',
                    'info' => 'Description of webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'removeTokenWebhook',
            'description' => 'Remove a given token single webhook by identifier.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'tokenId',
                    'type' => 'String',
                    'info' => 'The token\'s identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idWebhook',
                    'type' => 'String',
                    'info' => 'The identifier of the webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getWebhook',
            'description' => 'Get single webhook by identifier.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idWebhook',
                    'type' => 'String',
                    'info' => 'The identifier of the webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createWebhook',
            'description' => 'Create a webhook.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'callbackURL',
                    'type' => 'String',
                    'info' => 'A valid URL that is reachable with a HEAD request.',
                    'required' => true,
                ),
                array (
                    'name' => 'idModel',
                    'type' => 'String',
                    'info' => 'Identifier of the model to be monitored.',
                    'required' => true,
                ),
                array (
                    'name' => 'description',
                    'type' => 'String',
                    'info' => 'Description of webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateWebhook',
            'description' => 'Update a webhook.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idWebhook',
                    'type' => 'String',
                    'info' => 'The identifier of the webhook.',
                    'required' => true,
                ),
                array (
                    'name' => 'callbackURL',
                    'type' => 'String',
                    'info' => 'A valid URL that is reachable with a HEAD request.',
                    'required' => true,
                ),
                array (
                    'name' => 'idModel',
                    'type' => 'String',
                    'info' => 'Identifier of the model to be monitored.',
                    'required' => true,
                ),
                array (
                    'name' => 'description',
                    'type' => 'String',
                    'info' => 'Description of webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteWebhook',
            'description' => 'Delete a webhook.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'idWebhook',
                    'type' => 'String',
                    'info' => 'The identifier of the webhook.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getType',
            'description' => 'Get type of team or user.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'teamOrUserId',
                    'type' => 'String',
                    'info' => 'Team or user identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getBoard',
            'description' => 'Get board by identifier.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'actions',
                    'type' => 'String',
                    'info' => 'Comma-separated list of actions. One of: all, addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember, updateOrganization.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsEntities',
                    'type' => 'Boolean',
                    'info' => 'Actions entities. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsDisplay',
                    'type' => 'Boolean',
                    'info' => 'Display actions. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsFormat',
                    'type' => 'String',
                    'info' => 'One of actions format. One of: count, list, minimal.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsSince',
                    'type' => 'String',
                    'info' => 'One of actions since. One of: date, null, lastView.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsLimit',
                    'type' => 'String',
                    'info' => 'Actions limit. One of: number from 0 to 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action fields. One of: all, data, date, idMemberCreator, type.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionMember',
                    'type' => 'Boolean',
                    'info' => 'Action member. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionMemberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action member fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionMemberCreator',
                    'type' => 'Boolean',
                    'info' => 'Action member creator. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionMemberCreatorFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action member creator fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'cards',
                    'type' => 'String',
                    'info' => 'Type of cards. One of: all, closed, none, open, visible.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardAttachments',
                    'type' => 'String',
                    'info' => 'Type of card attachments. One of: false, cover.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardAttachmentFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card attachment fields. One of: all, bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardChecklists',
                    'type' => 'String',
                    'info' => 'Card checklists. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardPluginData',
                    'type' => 'Boolean',
                    'info' => 'Card pluginData. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardStickers',
                    'type' => 'Boolean',
                    'info' => 'Card stickers. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'boardStars',
                    'type' => 'String',
                    'info' => 'Type of board stars. One of: mine, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'labels',
                    'type' => 'String',
                    'info' => 'Type of labels. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of label fields. One of: color, idBoard, name, uses.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelsLimit',
                    'type' => 'String',
                    'info' => 'Labels limit. One of: number from 0 to 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'lists',
                    'type' => 'String',
                    'info' => 'Type of lists. One of: all, closed, none, open.',
                    'required' => false,
                ),
                array (
                    'name' => 'listFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of list fields. One of: all, closed, idBoard, name, pos, subscribed.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberships',
                    'type' => 'String',
                    'info' => 'Comma-separated list of memberships. One of: none, active, admin, deactivated, me, normal.',
                    'required' => false,
                ),
                array (
                    'name' => 'membershipsMember',
                    'type' => 'Boolean',
                    'info' => 'Memberships member. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'membershipsMemberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of memberships member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'members',
                    'type' => 'String',
                    'info' => 'Type of members. One of: admins, all, none, normal, owners.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'membersInvited',
                    'type' => 'String',
                    'info' => 'Type of members invited. One of: admins, all, none, normal, owners.',
                    'required' => false,
                ),
                array (
                    'name' => 'membersInvitedFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of members invited fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'pluginData',
                    'type' => 'Boolean',
                    'info' => 'Plugin data. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklists',
                    'type' => 'String',
                    'info' => 'Type of checklists. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklistFields',
                    'type' => 'String',
                    'info' => 'Type of checklist fields. One of: idBoard, idCard, name, pos.',
                    'required' => false,
                ),
                array (
                    'name' => 'organization',
                    'type' => 'Boolean',
                    'info' => 'Organization. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'organizationFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of organization fields. One of: billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website.',
                    'required' => false,
                ),
                array (
                    'name' => 'organizationMemberships',
                    'type' => 'String',
                    'info' => 'Type of organization memberships. One of: none, active, admin, deactivated, me, normal.',
                    'required' => false,
                ),
                array (
                    'name' => 'organizationPluginData',
                    'type' => 'String',
                    'info' => 'Organization plugin data. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'myPrefs',
                    'type' => 'Boolean',
                    'info' => 'My prefs. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'tags',
                    'type' => 'Boolean',
                    'info' => 'Tags. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardActions',
            'description' => 'Get single board actions.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'entities',
                    'type' => 'Boolean',
                    'info' => 'Actions entities. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'display',
                    'type' => 'Boolean',
                    'info' => 'Display actions. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Comma-separated list of actions type. One of: all, addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember, updateOrganization.',
                    'required' => false,
                ),
                array (
                    'name' => 'format',
                    'type' => 'String',
                    'info' => 'One of actions format. One of: count, list, minimal.',
                    'required' => false,
                ),
                array (
                    'name' => 'since',
                    'type' => 'String',
                    'info' => 'One of actions since. One of: date, null, lastView.',
                    'required' => false,
                ),
                array (
                    'name' => 'before',
                    'type' => 'String',
                    'info' => 'One of actions before, date or null.',
                    'required' => false,
                ),
                array (
                    'name' => 'page',
                    'type' => 'String',
                    'info' => 'Actions page. Page limit must be less than 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'idModels',
                    'type' => 'String',
                    'info' => 'Actions identifier models. Return actions related to these model identifiers.',
                    'required' => false,
                ),
                array (
                    'name' => 'limit',
                    'type' => 'String',
                    'info' => 'Actions limit. One of: number from 0 to 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action fields. One of: all, data, date, idMemberCreator, type.',
                    'required' => false,
                ),
                array (
                    'name' => 'member',
                    'type' => 'Boolean',
                    'info' => 'Action member. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action member fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberCreator',
                    'type' => 'Boolean',
                    'info' => 'Action member creator. One of: true, false.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardStars',
            'description' => 'Get single board stars.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Type of board stars. One of: mine, none.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardCards',
            'description' => 'Get single board cards.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'actions',
                    'type' => 'String',
                    'info' => 'Comma-separated list of actions. One of: all, addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember, updateOrganization.',
                    'required' => false,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Type of cards. One of: all, closed, none, open, visible.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachments',
                    'type' => 'String',
                    'info' => 'Type of card attachments. One of: false, cover.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachmentFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card attachment fields. One of: all, bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklists',
                    'type' => 'String',
                    'info' => 'Card checklists. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'stickers',
                    'type' => 'Boolean',
                    'info' => 'Card stickers. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'members',
                    'type' => 'String',
                    'info' => 'Card members. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItemStates',
                    'type' => 'Boolean',
                    'info' => 'Check item states. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'limit',
                    'type' => 'String',
                    'info' => 'Limit, a number from 1 to 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'since',
                    'type' => 'String',
                    'info' => 'Since, a date, or null.',
                    'required' => false,
                ),
                array (
                    'name' => 'before',
                    'type' => 'String',
                    'info' => 'Before, a date, or null.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardSingleCard',
            'description' => 'Get single cards of single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idCard',
                    'type' => 'String',
                    'info' => 'The card identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'attachments',
                    'type' => 'String',
                    'info' => 'Type of card attachments. One of: false, cover.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachmentFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card attachment fields. One of: all, bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'actions',
                    'type' => 'String',
                    'info' => 'Comma-separated list of actions. One of: all, addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember, updateOrganization.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsEntities',
                    'type' => 'Boolean',
                    'info' => 'Actions entities. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsDisplay',
                    'type' => 'Boolean',
                    'info' => 'Display actions. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionsLimit',
                    'type' => 'String',
                    'info' => 'Actions limit. One of: number from 0 to 1000.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action fields. One of: all, data, date, idMemberCreator, type.',
                    'required' => false,
                ),
                array (
                    'name' => 'actionMemberCreatorFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of action member creator fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'members',
                    'type' => 'Boolean',
                    'info' => 'Card members. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItemStates',
                    'type' => 'Boolean',
                    'info' => 'Check item states. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItemStateFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of check item states fields. One of: all, idCheckItem, state.',
                    'required' => false,
                ),
                array (
                    'name' => 'labels',
                    'type' => 'Boolean',
                    'info' => 'Labels. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklists',
                    'type' => 'String',
                    'info' => 'Type of checklists. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklistFields',
                    'type' => 'String',
                    'info' => 'Type of checklist fields. One of: idBoard, idCard, name, pos.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardChecklists',
            'description' => 'Get single board checklists.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'cards',
                    'type' => 'String',
                    'info' => 'List of cards type. One of: all, closed, none, open.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItems',
                    'type' => 'String',
                    'info' => 'Check items. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItemFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of check item fields. One of: name, nameData, pos, state, type.',
                    'required' => false,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Filter, one of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, idBoard, idCard, name, pos.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardDeltas',
            'description' => 'Get single board deltas.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'tags',
                    'type' => 'String',
                    'info' => 'A valid tag for subscribing.',
                    'required' => true,
                ),
                array (
                    'name' => 'ixLastUpdate',
                    'type' => 'String',
                    'info' => 'IX last update a number, from -1 to Infinity.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getBoardLabels',
            'description' => 'Get single board labels.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, color, idBoard, name, uses.',
                    'required' => false,
                ),
                array (
                    'name' => 'limit',
                    'type' => 'String',
                    'info' => 'Limit, a number from 0 to 1000.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getBoardSingleLabel',
            'description' => 'Get single labels of single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idLabel',
                    'type' => 'String',
                    'info' => 'The identifier of the label.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, color, idBoard, name, uses.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardLists',
            'description' => 'Get single board lists.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'cards',
                    'type' => 'String',
                    'info' => 'Type of cards. One of: all, closed, none, open, visible.',
                    'required' => false,
                ),
                array (
                    'name' => 'cardFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Filter by type of lists. One of: all, closed, none, open.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, closed, idBoard, name, pos, subscribed.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardMembers',
            'description' => 'Get single board members.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Filter by type of lists. One of: admins, all, none, normal, owners.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'activity',
                    'type' => 'Boolean',
                    'info' => 'Activity. One of: true, false.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getSingleBoardMemberCards',
            'description' => 'Get single members cards of single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idMember',
                    'type' => 'String',
                    'info' => 'An identifier, username, or organization name of member.',
                    'required' => true,
                ),
                array (
                    'name' => 'actions',
                    'type' => 'String',
                    'info' => 'Comma-separated list of actions. One of: all, addAttachmentToCard, addChecklistToCard, addMemberToBoard, addMemberToCard, addMemberToOrganization, addToOrganizationBoard, commentCard, convertToCardFromCheckItem, copyBoard, copyCard, copyCommentCard, createBoard, createCard, createList, createOrganization, deleteAttachmentFromCard, deleteBoardInvitation, deleteCard, deleteOrganizationInvitation, disablePowerUp, emailCard, enablePowerUp, makeAdminOfBoard, makeNormalMemberOfBoard, makeNormalMemberOfOrganization, makeObserverOfBoard, memberJoinedTrello, moveCardFromBoard, moveCardToBoard, moveListFromBoard, moveListToBoard, removeChecklistFromCard, removeFromOrganizationBoard, removeMemberFromCard, unconfirmedBoardInvitation, unconfirmedOrganizationInvitation, updateBoard, updateCard, updateCard:closed, updateCard:desc, updateCard:idList, updateCard:name, updateCheckItemStateOnCard, updateChecklist, updateList, updateList:closed, updateList:name, updateMember, updateOrganization.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachments',
                    'type' => 'String',
                    'info' => 'Type of card attachments. One of: false, cover.',
                    'required' => false,
                ),
                array (
                    'name' => 'attachmentFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of card attachment fields. One of: all, bytes, date, edgeColor, idMember, isUpload, mimeType, name, previews, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'members',
                    'type' => 'Boolean',
                    'info' => 'Card members. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
                array (
                    'name' => 'checkItemStates',
                    'type' => 'Boolean',
                    'info' => 'Check item states. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'checklists',
                    'type' => 'String',
                    'info' => 'Type of checklists. One of: all, none.',
                    'required' => false,
                ),
                array (
                    'name' => 'board',
                    'type' => 'Boolean',
                    'info' => 'Board, one of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'boardFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of board fields. One of: closed, dateLastActivity, dateLastView, desc, descData, idOrganization, invitations, invited, labelNames, memberships, name, pinned, powerUps, prefs, shortLink, shortUrl, starred, subscribed, url.',
                    'required' => false,
                ),
                array (
                    'name' => 'list',
                    'type' => 'Boolean',
                    'info' => 'List, one of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'listFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of list fields. One of: all, closed, idBoard, name, pos, subscribed.',
                    'required' => false,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Type of filter. One of: all, closed, none, open, visible.',
                    'required' => false,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: all, badges, checkItemStates, closed, dateLastActivity, desc, descData, due, email, idAttachmentCover, idBoard, idChecklists, idLabels, idList, idMembers, idMembersVoted, idShort, labels, manualCoverAttachment, name, pos, shortLink, shortUrl, subscribed, url.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getMembersInvitedToBoard',
            'description' => 'Get members invited to single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardMemberships',
            'description' => 'Get single board memberships.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'filter',
                    'type' => 'String',
                    'info' => 'Comma-separated list of filter. One of: none, active, admin, deactivated, me, normal.',
                    'required' => false,
                ),
                array (
                    'name' => 'member',
                    'type' => 'Boolean',
                    'info' => 'Memberships member. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardSingleMembership',
            'description' => 'Get single memberships of single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idMembership',
                    'type' => 'String',
                    'info' => 'A membership document identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'member',
                    'type' => 'Boolean',
                    'info' => 'Memberships member. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'getBoardPreferences',
            'description' => 'Get single board preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'getBoardOrganization',
            'description' => 'Get single board organization.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'fields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of organization fields. One of: all, billableMemberCount, desc, descData, displayName, idBoards, invitations, invited, logoHash, memberships, name, powerUps, prefs, premiumFeatures, products, url, website.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'updateBoard',
            'description' => 'Update single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Board name, a string with a length from 1 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'desc',
                    'type' => 'String',
                    'info' => 'Board description, a string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'closed',
                    'type' => 'Boolean',
                    'info' => 'Is closed. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'subscribed',
                    'type' => 'Boolean',
                    'info' => 'Is subscribed. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'idOrganization',
                    'type' => 'String',
                    'info' => 'Identifier of organization. A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsPermissionLevel',
                    'type' => 'String',
                    'info' => 'Board preference permission level. One of: org, private, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsSelfJoin',
                    'type' => 'Boolean',
                    'info' => 'Board preference self join. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsCardCovers',
                    'type' => 'Boolean',
                    'info' => 'Board preference card covers. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsInvitations',
                    'type' => 'String',
                    'info' => 'Board preference invitations. One of: admins, members.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsVoting',
                    'type' => 'String',
                    'info' => 'Board preference voting. One of: disabled, members, observers, org, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsComments',
                    'type' => 'String',
                    'info' => 'Board preference comments. One of: disabled, members, observers, org, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsBackground',
                    'type' => 'String',
                    'info' => 'Board preferences background. One of: A standard background name, or the identifier of a custom background.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsCardAging',
                    'type' => 'String',
                    'info' => 'Board preferences card aging. One of: pirate, regular.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsCalendarFeedEnabled',
                    'type' => 'Boolean',
                    'info' => 'Board preferences calendar feed enabled. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesGreen',
                    'type' => 'String',
                    'info' => 'Green label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesYellow',
                    'type' => 'String',
                    'info' => 'Yellow label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesOrange',
                    'type' => 'String',
                    'info' => 'Orange label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesRed',
                    'type' => 'String',
                    'info' => 'Red label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesPurple',
                    'type' => 'String',
                    'info' => 'Purple label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'labelNamesBlue',
                    'type' => 'String',
                    'info' => 'Blue label name. One of: A string with a length from 0 to 16384.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardCloseState',
            'description' => 'Update single board close state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Is closed. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardDescription',
            'description' => 'Update single board description.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Description value. a string with a length from 0 to 16384.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardOrganization',
            'description' => 'Update single board organization.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'New organization identifier. a string with a length from 0 to 16384.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardSingleLabel',
            'description' => 'Update single label of single board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'labelColor',
                    'type' => 'String',
                    'info' => 'Label color name. One of: blue, green, orange, purple, red, yellow.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Label value, a string with a length from 0 to 16384.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'addMemberToBoard',
            'description' => 'Add single member to board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'email',
                    'type' => 'String',
                    'info' => 'An email address of new member.',
                    'required' => true,
                ),
                array (
                    'name' => 'fullName',
                    'type' => 'String',
                    'info' => 'Full name of new member. Cannot begin or end with a space.',
                    'required' => true,
                ),
                array (
                    'name' => 'type',
                    'type' => 'String',
                    'info' => 'Type of new member. One of: admin, normal, observer.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'setMemberRoleOnBoard',
            'description' => 'Update board single member role.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idMember',
                    'type' => 'String',
                    'info' => 'An identifier, username, or organization name.',
                    'required' => true,
                ),
                array (
                    'name' => 'type',
                    'type' => 'String',
                    'info' => 'Type of new member. One of: admin, normal, observer.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardMembership',
            'description' => 'Update board single membership.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idMembership',
                    'type' => 'String',
                    'info' => 'An identifier of membership.',
                    'required' => true,
                ),
                array (
                    'name' => 'type',
                    'type' => 'String',
                    'info' => 'Type of new member. One of: admin, normal, observer.',
                    'required' => true,
                ),
                array (
                    'name' => 'memberFields',
                    'type' => 'String',
                    'info' => 'Comma-separated list of member fields. One of: all, avatarHash, bio, bioData, confirmed, fullName, idPremOrgsAdmin, initials, memberType, products, status, url, username.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'setBoardName',
            'description' => 'Update board name.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board new name, a string with a length from 1 to 16384.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardSubscriptionState',
            'description' => 'Update board subscription state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board subscription state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateEmailPosition',
            'description' => 'Update board email position.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board email position. One of: bottom, top.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateEmailList',
            'description' => 'Update board email list.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board email list identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'setShowListGuideState',
            'description' => 'Update board show list guide state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board show list guide state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateShowSidebarState',
            'description' => 'Update board show sidebar state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board show sidebar state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateShowSidebarActivityState',
            'description' => 'Update board show sidebar activity state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board show sidebar activity state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateShowSidebarBoardActionsState',
            'description' => 'Update board show sidebar board actions state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board show sidebar board actions state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateShowSidebarMembersState',
            'description' => 'Update board show sidebar members state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board show sidebar members state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardBackground',
            'description' => 'Update board background.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board background. A standard background name, or the identifier of a custom background.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateCalendarFeedEnableState',
            'description' => 'Update board calendar feed enable state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board calendar feed enable state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardCardAgingPrefs',
            'description' => 'Update board card aging preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board card aging preferences. One of: pirate, regular.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardCardCoversState',
            'description' => 'Update board card covers state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board card covers state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardCommentsPrefs',
            'description' => 'Update board comments preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board comments preferences. One of: disabled, members, observers, org, public.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardInvitationsPrefs',
            'description' => 'Update board invitations preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board invitations preferences. One of: admins, members.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardPermissionLevel',
            'description' => 'Update board permission level.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board permission level. One of: org, private, public.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardSelfJoinState',
            'description' => 'Update board self join state.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'Boolean',
                    'info' => 'Board self join state. One of: true, false.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'updateBoardVotingPrefs',
            'description' => 'Update board voting preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Board voting preferences. One of: disabled, members, observers, org, public.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createBoard',
            'description' => 'Update board voting preferences.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Board name, a string with a length from 1 to 16384.',
                    'required' => true,
                ),
                array (
                    'name' => 'defaultLabels',
                    'type' => 'Boolean',
                    'info' => 'Default labels. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'defaultLists',
                    'type' => 'Boolean',
                    'info' => 'Default lists. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'desc',
                    'type' => 'String',
                    'info' => 'Description, a string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'idOrganization',
                    'type' => 'String',
                    'info' => 'The identifier or name of the organization to add the board to.',
                    'required' => false,
                ),
                array (
                    'name' => 'idBoardSource',
                    'type' => 'String',
                    'info' => 'The identifier of the board to copy into the new board.',
                    'required' => false,
                ),
                array (
                    'name' => 'keepFromSource',
                    'type' => 'String',
                    'info' => 'Keep from source, all or components of the source board to copy.',
                    'required' => false,
                ),
                array (
                    'name' => 'powerUps',
                    'type' => 'String',
                    'info' => 'PowerUps. One of: all, calendar, cardAging, recap, voting.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsPermissionLevel',
                    'type' => 'String',
                    'info' => 'Preferences permission level. One of: org, private, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsVoting',
                    'type' => 'String',
                    'info' => 'Preferences voting. One of: disabled, members, observers, org, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsComments',
                    'type' => 'String',
                    'info' => 'Preferences comments. One of: disabled, members, observers, org, public.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsInvitations',
                    'type' => 'String',
                    'info' => 'Preferences invitations. One of: admins, members.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsSelfJoin',
                    'type' => 'Boolean',
                    'info' => 'Preferences self join. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsCardCovers',
                    'type' => 'Boolean',
                    'info' => 'Preferences card covers. One of: true, false.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsBackground',
                    'type' => 'String',
                    'info' => 'Preferences background, a string with a length from 0 to 16384.',
                    'required' => false,
                ),
                array (
                    'name' => 'prefsCardAging',
                    'type' => 'String',
                    'info' => 'Preferences card aging. One of: pirate, regular.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'createBoardCalendarKey',
            'description' => 'Create board calendar key.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'addChecklistToBoard',
            'description' => 'Add checklist to board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Checklists name, a string with a length from 1 to 16384.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createBoardEmailKey',
            'description' => 'Create board email key.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createBoardLabels',
            'description' => 'Create board labels.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Board labels name, a string with a length from 0 to 16384.',
                    'required' => true,
                ),
                array (
                    'name' => 'color',
                    'type' => 'String',
                    'info' => 'Label color or null. Valid value: blue, green, orange, purple, red, yellow.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createBoardList',
            'description' => 'Create board list.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'name',
                    'type' => 'String',
                    'info' => 'Board lists name, a string with a length from 0 to 16384.',
                    'required' => true,
                ),
                array (
                    'name' => 'pos',
                    'type' => 'String',
                    'info' => 'A position. top, bottom, or a positive number.',
                    'required' => false,
                ),
            ),
        ),
        array (
            'name' => 'markBoardViewed',
            'description' => 'Mark board as viewed.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'createBoardPowerUps',
            'description' => 'Create board power Ups.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'value',
                    'type' => 'String',
                    'info' => 'Power Ups value. One of: calendar, cardAging, recap, voting.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteMemberFromBoard',
            'description' => 'Delete member from board.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'idMember',
                    'type' => 'String',
                    'info' => 'An identifier, username, or organization name of member.',
                    'required' => true,
                ),
            ),
        ),
        array (
            'name' => 'deleteBoardPowerUp',
            'description' => 'Delete board power up.',
            'args' => array (
                array (
                    'name' => 'apiKeys',
                    'type' => 'credentials',
                    'info' => 'Your API keys credentials.',
                    'required' => true,
                ),
                array (
                    'name' => 'accessToken',
                    'type' => 'String',
                    'info' => 'Access token.',
                    'required' => true,
                ),
                array (
                    'name' => 'boardId',
                    'type' => 'String',
                    'info' => 'The board identifier.',
                    'required' => true,
                ),
                array (
                    'name' => 'powerUp',
                    'type' => 'String',
                    'info' => 'Board power up. One of: calendar, cardAging, recap, voting.',
                    'required' => true,
                ),
            ),
        ),
    ),
    'custom' => array (
        'getToken' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}',
            'method' => 'GET',
        ),
        'deleteToken' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}',
            'method' => 'DELETE',
        ),
        'getTokenMember' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/member',
            'method' => 'GET',
        ),
        'getTokenWebhooks' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/webhooks',
            'method' => 'GET',
        ),
        'getTokenSingleWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'idWebhook' => 'idWebhook',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/webhooks/{{idWebhook}}',
            'method' => 'GET',
        ),
        'createTokenWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'callbackURL' => 'callbackURL',
                'idModel' => 'idModel',
                'description' => 'description',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/webhooks',
            'method' => 'POST',
        ),
        'updateTokenWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'callbackURL' => 'callbackURL',
                'idModel' => 'idModel',
                'description' => 'description',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/webhooks',
            'method' => 'PUT',
        ),
        'removeTokenWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'tokenId' => 'tokenId',
                'idWebhook' => 'idWebhook',
            ),
            'vendorUrl' => 'https://api.trello.com/1/tokens/{{tokenId}}/webhooks/{{idWebhook}}',
            'method' => 'DELETE',
        ),
        'getWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'idWebhook' => 'idWebhook',
            ),
            'vendorUrl' => 'https://api.trello.com/1/webhooks/{{idWebhook}}',
            'method' => 'GET',
        ),
        'createWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'callbackURL' => 'callbackURL',
                'idModel' => 'idModel',
                'description' => 'description',
            ),
            'vendorUrl' => 'https://api.trello.com/1/webhooks',
            'method' => 'POST',
        ),
        'updateWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'idWebhook' => 'idWebhook',
                'callbackURL' => 'callbackURL',
                'idModel' => 'idModel',
                'description' => 'description',
            ),
            'vendorUrl' => 'https://api.trello.com/1/webhooks/{{idWebhook}}',
            'method' => 'PUT',
        ),
        'deleteWebhook' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'idWebhook' => 'idWebhook',
            ),
            'vendorUrl' => 'https://api.trello.com/1/webhooks/{{idWebhook}}',
            'method' => 'DELETE',
        ),
        'getType' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'teamOrUserId' => 'teamOrUserId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/types/{{teamOrUserId}}',
            'method' => 'GET',
        ),
        'getBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'actions' => 'actions',
                'actionsEntities' => 'actions_entities',
                'actionsDisplay' => 'actions_display',
                'actionsFormat' => 'actions_format',
                'actionsSince' => 'actions_since',
                'actionsLimit' => 'actions_limit',
                'actionFields' => 'action_fields',
                'actionMember' => 'action_member',
                'actionMemberFields' => 'action_member_fields',
                'actionMemberCreator' => 'action_memberCreator',
                'actionMemberCreatorFields' => 'action_memberCreator_fields',
                'cards' => 'cards',
                'cardFields' => 'card_fields',
                'cardAttachments' => 'card_attachments',
                'cardAttachmentFields' => 'card_attachment_fields',
                'cardChecklists' => 'card_checklists',
                'cardPluginData' => 'card_pluginData',
                'cardStickers' => 'card_stickers',
                'boardStars' => 'boardStars',
                'labels' => 'labels',
                'labelFields' => 'label_fields',
                'labelsLimit' => 'labels_limit',
                'lists' => 'lists',
                'listFields' => 'list_fields',
                'memberships' => 'memberships',
                'membershipsMember' => 'memberships_member',
                'membershipsMemberFields' => 'memberships_member_fields',
                'members' => 'members',
                'memberFields' => 'member_fields',
                'membersInvited' => 'membersInvited',
                'membersInvitedFields' => 'membersInvited_fields',
                'pluginData' => 'pluginData',
                'checklists' => 'checklists',
                'checklistFields' => 'checklist_fields',
                'organization' => 'organization',
                'organizationFields' => 'organization_fields',
                'organizationMemberships' => 'organization_memberships',
                'organizationPluginData' => 'organization_pluginData',
                'myPrefs' => 'myPrefs',
                'tags' => 'tags',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}',
            'method' => 'GET',
        ),
        'getBoardActions' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'entities' => 'entities',
                'display' => 'display',
                'filter' => 'filter',
                'format' => 'format',
                'since' => 'since',
                'before' => 'before',
                'page' => 'page',
                'idModels' => 'idModels',
                'limit' => 'limit',
                'fields' => 'fields',
                'member' => 'member',
                'memberFields' => 'member_fields',
                'memberCreator' => 'memberCreator',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/actions',
            'method' => 'GET',
        ),
        'getBoardStars' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'filter' => 'filter',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/boardStars',
            'method' => 'GET',
        ),
        'getBoardCards' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'actions' => 'actions',
                'filter' => 'filter',
                'fields' => 'fields',
                'attachments' => 'attachments',
                'attachmentFields' => 'attachment_fields',
                'checklists' => 'checklists',
                'stickers' => 'stickers',
                'members' => 'members',
                'memberFields' => 'member_fields',
                'checkItemStates' => 'checkItemStates',
                'limit' => 'limit',
                'since' => 'since',
                'before' => 'before',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/cards',
            'method' => 'GET',
        ),
        'getBoardSingleCard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idCard' => 'idCard',
                'attachments' => 'attachments',
                'attachmentFields' => 'attachment_fields',
                'actions' => 'actions',
                'actionsEntities' => 'actions_entities',
                'actionsDisplay' => 'actions_display',
                'actionsLimit' => 'actions_limit',
                'actionFields' => 'action_fields',
                'actionMemberCreatorFields' => 'action_memberCreator_fields',
                'members' => 'members',
                'memberFields' => 'member_fields',
                'checkItemStates' => 'checkItemStates',
                'checkItemStateFields' => 'checkItemState_fields',
                'labels' => 'labels',
                'checklists' => 'checklists',
                'checklistFields' => 'checklist_fields',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/cards/{{idCard}}',
            'method' => 'GET',
        ),
        'getBoardChecklists' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'cards' => 'cards',
                'cardFields' => 'card_fields',
                'checkItems' => 'checkItems',
                'checkItemFields' => 'checkItem_fields',
                'filter' => 'filter',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/cards',
            'method' => 'GET',
        ),
        'getBoardDeltas' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'tags' => 'tags',
                'ixLastUpdate' => 'ixLastUpdate',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/deltas',
            'method' => 'GET',
        ),
        'getBoardLabels' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'fields' => 'fields',
                'limit' => 'limit',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/labels',
            'method' => 'GET',
        ),
        'getBoardSingleLabel' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idLabel' => 'idLabel',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/labels/{{idLabel}}',
            'method' => 'GET',
        ),
        'getBoardLists' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'cards' => 'cards',
                'cardFields' => 'card_fields',
                'filter' => 'filter',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/lists',
            'method' => 'GET',
        ),
        'getBoardMembers' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'filter' => 'filter',
                'fields' => 'fields',
                'activity' => 'activity',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/members',
            'method' => 'GET',
        ),
        'getSingleBoardMemberCards' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idMember' => 'idMember',
                'actions' => 'actions',
                'attachments' => 'attachments',
                'attachmentFields' => 'attachment_fields',
                'members' => 'members',
                'memberFields' => 'member_fields',
                'checkItemStates' => 'checkItemStates',
                'checklists' => 'checklists',
                'board' => 'board',
                'boardFields' => 'board_fields',
                'list' => 'list',
                'listFields' => 'list_fields',
                'filter' => 'filter',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/members/{{idMember}}/cards',
            'method' => 'GET',
        ),
        'getMembersInvitedToBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/membersInvited',
            'method' => 'GET',
        ),
        'getBoardMemberships' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'filter' => 'filter',
                'member' => 'member',
                'memberFields' => 'member_fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/memberships',
            'method' => 'GET',
        ),
        'getBoardSingleMembership' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idMembership' => 'idMembership',
                'member' => 'member',
                'memberFields' => 'member_fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/memberships/{{idMembership}}',
            'method' => 'GET',
        ),
        'getBoardPreferences' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs',
            'method' => 'GET',
        ),
        'getBoardOrganization' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'fields' => 'fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/organization',
            'method' => 'GET',
        ),
        'updateBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'name' => 'name',
                'desc' => 'desc',
                'closed' => 'closed',
                'subscribed' => 'subscribed',
                'idOrganization' => 'idOrganization',
                'prefsPermissionLevel' => 'prefs/permissionLevel',
                'prefsSelfJoin' => 'prefs/selfJoin',
                'prefsCardCovers' => 'prefs/cardCovers',
                'prefsInvitations' => 'prefs/invitations',
                'prefsVoting' => 'prefs/voting',
                'prefsComments' => 'prefs/comments',
                'prefsBackground' => 'prefs/background',
                'prefsCardAging' => 'prefs/cardAging',
                'prefsCalendarFeedEnabled' => 'prefs/calendarFeedEnabled',
                'labelNamesGreen' => 'labelNames/green',
                'labelNamesYellow' => 'labelNames/yellow',
                'labelNamesOrange' => 'labelNames/orange',
                'labelNamesRed' => 'labelNames/red',
                'labelNamesPurple' => 'labelNames/purple',
                'labelNamesBlue' => 'labelNames/blue',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}',
            'method' => 'PUT',
        ),
        'updateBoardCloseState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/closed',
            'method' => 'PUT',
        ),
        'updateBoardDescription' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/desc',
            'method' => 'PUT',
        ),
        'updateBoardOrganization' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/idOrganization',
            'method' => 'PUT',
        ),
        'updateBoardSingleLabel' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'labelColor' => 'labelColor',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/labelNames/{{labelColor}}',
            'method' => 'PUT',
        ),
        'addMemberToBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'email' => 'email',
                'fullName' => 'fullName',
                'type' => 'type',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/members',
            'method' => 'PUT',
        ),
        'setMemberRoleOnBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idMember' => 'idMember',
                'type' => 'type',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/members/{{idMember}}',
            'method' => 'PUT',
        ),
        'updateBoardMembership' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idMembership' => 'idMembership',
                'type' => 'type',
                'memberFields' => 'member_fields',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/memberships/{{idMembership}}',
            'method' => 'PUT',
        ),
        'setBoardName' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/name',
            'method' => 'PUT',
        ),
        'updateBoardSubscriptionState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/subscribed',
            'method' => 'PUT',
        ),
        'updateEmailPosition' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/emailPosition',
            'method' => 'PUT',
        ),
        'updateEmailList' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/idEmailList',
            'method' => 'PUT',
        ),
        'setShowListGuideState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/showListGuide',
            'method' => 'PUT',
        ),
        'updateShowSidebarState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/showSidebar',
            'method' => 'PUT',
        ),
        'updateShowSidebarActivityState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/showSidebarActivity',
            'method' => 'PUT',
        ),
        'updateShowSidebarBoardActionsState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/showSidebarBoardActions',
            'method' => 'PUT',
        ),
        'updateShowSidebarMembersState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/showSidebarMembers',
            'method' => 'PUT',
        ),
        'updateBoardBackground' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/myPrefs/background',
            'method' => 'PUT',
        ),
        'updateCalendarFeedEnableState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/calendarFeedEnabled',
            'method' => 'PUT',
        ),
        'updateBoardCardAgingPrefs' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/cardAging',
            'method' => 'PUT',
        ),
        'updateBoardCardCoversState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/cardCovers',
            'method' => 'PUT',
        ),
        'updateBoardCommentsPrefs' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/comments',
            'method' => 'PUT',
        ),
        'updateBoardInvitationsPrefs' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/invitations',
            'method' => 'PUT',
        ),
        'updateBoardPermissionLevel' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/permissionLevel',
            'method' => 'PUT',
        ),
        'updateBoardSelfJoinState' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/selfJoin',
            'method' => 'PUT',
        ),
        'updateBoardVotingPrefs' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/prefs/voting',
            'method' => 'PUT',
        ),
        'createBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'name' => 'name',
                'defaultLabels' => 'defaultLabels',
                'defaultLists' => 'defaultLists',
                'desc' => 'desc',
                'idOrganization' => 'idOrganization',
                'idBoardSource' => 'idBoardSource',
                'keepFromSource' => 'keepFromSource',
                'powerUps' => 'powerUps',
                'prefsPermissionLevel' => 'prefs_permissionLevel',
                'prefsVoting' => 'prefs_voting',
                'prefsComments' => 'prefs_comments',
                'prefsInvitations' => 'prefs_invitations',
                'prefsSelfJoin' => 'prefs_selfJoin',
                'prefsCardCovers' => 'prefs_cardCovers',
                'prefsBackground' => 'prefs_background',
                'prefsCardAging' => 'prefs_cardAging',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards',
            'method' => 'POST',
        ),
        'createBoardCalendarKey' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/calendarKey/generate',
            'method' => 'POST',
        ),
        'addChecklistToBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'name' => 'name',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/checklists',
            'method' => 'POST',
        ),
        'createBoardEmailKey' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/emailKey/generate',
            'method' => 'POST',
        ),
        'createBoardLabels' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'name' => 'name',
                'color' => 'color',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/labels',
            'method' => 'POST',
        ),
        'createBoardList' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'name' => 'name',
                'pos' => 'pos',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/lists',
            'method' => 'POST',
        ),
        'markBoardViewed' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/markAsViewed',
            'method' => 'POST',
        ),
        'createBoardPowerUps' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'value' => 'value',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/powerUps',
            'method' => 'POST',
        ),
        'deleteMemberFromBoard' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'idMember' => 'idMember',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/members/{{idMember}}',
            'method' => 'DELETE',
        ),
        'deleteBoardPowerUp' => array (
            'dictionary' => array (
                'apiKeys' => 'apiKeys',
                'accessToken' => 'accessToken',
                'boardId' => 'boardId',
                'powerUp' => 'powerUp',
            ),
            'vendorUrl' => 'https://api.trello.com/1/boards/{{boardId}}/powerUps/{{powerUp}}',
            'method' => 'DELETE',
        ),
    ),
);